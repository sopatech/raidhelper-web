name: Release

# Trigger on version tags
on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-web
  MANIFESTS_REPO: sopatech/manifests-microservices

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Build application
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ci
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update manifests repository
        id: update_manifests
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          
          # Clone manifests repository using gh CLI with PAT
          gh repo clone ${{ env.MANIFESTS_REPO }} manifests-repo
          cd manifests-repo
          
          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git config credential.helper store
          echo "https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com" > ~/.git-credentials
          # Update remote URL to include token for git push
          git remote set-url origin https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ env.MANIFESTS_REPO }}.git
          
          # Create single PR for web service
          echo "Creating PR for production (Web service)..."
          # Delete branch if it exists locally and remotely
          git branch -D "release/raidhelper-web-production-$VERSION" 2>/dev/null || true
          git push origin --delete "release/raidhelper-web-production-$VERSION" 2>/dev/null || true
          git checkout -b "release/raidhelper-web-production-$VERSION"
          
          # Update Web service overlays
          sed -i "s/newTag: .*/newTag: $VERSION/" kustomize/raidhelper-web/overlays/production/kustomization.yaml
          sed -i "s/newTag: .*/newTag: $VERSION/" kustomize/raidhelper-web/overlays/local/kustomization.yaml
          
          # Add all changes
          git add kustomize/raidhelper-web/overlays/production/kustomization.yaml
          git add kustomize/raidhelper-web/overlays/local/kustomization.yaml
          
          git commit -m "chore: update raidhelper-web to $VERSION for production and local"
          git push origin "release/raidhelper-web-production-$VERSION"
          
          # Create single PR using GitHub CLI
          PR_URL=$(gh pr create \
            --title "Production: Release raidhelper-web $VERSION" \
            --body "Automated release PR for production and local environments.

          **Version:** $VERSION
          **Environments:** Production and Local
          **Service Updated:** Web
          **Docker Image:**
          â€¢ \`ghcr.io/${{ github.repository }}-web:$VERSION\`

          This PR updates both production and local environments for the raidhelper web service to use the new release." \
            --base main \
            --head "release/raidhelper-web-production-$VERSION" || echo "Production PR may already exist")
          echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
          
          echo "Release workflow completed:"
          echo "- Integration will automatically get latest via ArgoCD sync"
          echo "- Production PR created for $VERSION (Web service)"

      - name: Notify Discord
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ðŸš€ **Release v${{ steps.version.outputs.VERSION }} Complete!**
            
            **Docker Images Built:**
            â€¢ `ghcr.io/${{ github.repository }}-web:${{ steps.version.outputs.VERSION }}`
            
            **Manifest PR Created:**
            â€¢ ${{ steps.update_manifests.outputs.PR_URL }}
            
            **Release:** [View on GitHub](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.version.outputs.VERSION }})

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## ðŸš€ Release ${{ steps.version.outputs.VERSION }}
          
          **Docker Images:**
          - `ghcr.io/${{ github.repository }}-web:${{ steps.version.outputs.VERSION }}`
          - `ghcr.io/${{ github.repository }}-web:latest`
          
          **Changes:**
          - Updated web application to version ${{ steps.version.outputs.VERSION }}
          - Built and pushed Docker images to GitHub Container Registry
          - Created manifest PR for deployment
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
